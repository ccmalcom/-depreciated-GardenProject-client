'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var connect = function connect() {
  var mapProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (p) {
    return p;
  };
  return function (Component) {
    var Connected = function (_React$Component) {
      _inherits(Connected, _React$Component);

      function Connected() {
        _classCallCheck(this, Connected);

        return _possibleConstructorReturn(this, (Connected.__proto__ || Object.getPrototypeOf(Connected)).apply(this, arguments));
      }

      _createClass(Connected, [{
        key: 'render',
        value: function render() {
          var mapped = mapProps(this.context.state);

          return _react2.default.createElement(Component, _extends({}, this.props, mapped, { update: this.context.update }));
        }
      }]);

      return Connected;
    }(_react2.default.Component);

    Connected.displayName = 'Connected(' + getDisplayName(Component) + ')';
    Connected.contextTypes = {
      update: _propTypes2.default.func.isRequired,
      state: _propTypes2.default.object.isRequired
    };

    return Connected;
  };
};

var getDisplayName = function getDisplayName(Component) {
  return Component.displayName || Component.name || 'Component';
};

exports.default = connect;