{"ast":null,"code":"var _jsxFileName = \"/Users/shelley/Desktop/ElevenFiftyProjects/JavaScript-Library/projects/GardenProject-client/plant-it/src/components/plants/PlantsIndex.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport DisplayPlants from './plantTable/PlantTable';\nimport CreatePlant from './createPlant/CreatePlant';\nimport PlantView from './PlantView';\nimport AddToGarden from '../gardens/AddToGarden';\nimport { Container, Row, Col } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlantsIndex = props => {\n  _s();\n\n  const [plants, setPlants] = useState([]);\n  const [viewActive, setViewActive] = useState(false);\n  const [createActive, setCreateActive] = useState(false);\n  const [plantToView, setPlantToView] = useState([]);\n  const [gardenModalActive, setGardenModalActive] = useState(false);\n  const [plantToGarden, setPlantToGarden] = useState([]);\n  console.log(plants);\n  console.log('view active:', viewActive);\n\n  const fetchPlants = () => {\n    fetch('http://wd85-plant-it.herokuapp.com/plant/all', {\n      method: 'GET',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    }).then(res => res.json()).then(plantData => {\n      setPlants(plantData);\n      console.log(plants, plantData);\n    });\n  }; // view functions\n\n\n  const viewPlant = plant => {\n    setPlantToView(plant);\n    console.log(plant);\n  };\n\n  const viewOn = () => {\n    setViewActive(true);\n  };\n\n  const viewOff = () => {\n    setViewActive(false);\n  }; // add to garden functions (ignore this for now)\n\n\n  const addToGarden = plant => {\n    setPlantToGarden(plant);\n  };\n\n  const gardenModalOn = () => {\n    setGardenModalActive(true);\n  };\n\n  const gardenModalOff = () => {\n    setGardenModalActive(false);\n  }; // create functions (plantIt)\n\n\n  const createActiveOn = () => {\n    setCreateActive(true);\n  };\n\n  const createActiveOff = () => {\n    setCreateActive(false);\n  };\n\n  useEffect(() => {\n    fetchPlants();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createActiveOn,\n        children: \"PlantIt!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DisplayPlants, {\n        plants: plants,\n        viewPlant: viewPlant,\n        viewOn: viewOn,\n        addToGarden: addToGarden,\n        gardenModalOn: gardenModalOn,\n        fetchPlants: fetchPlants,\n        token: props.token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [viewActive ? /*#__PURE__*/_jsxDEV(PlantView, {\n        plantToView: plantToView,\n        viewOff: viewOff,\n        addToGarden: addToGarden,\n        gardenModalOn: gardenModalOn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 31\n      }, this) : null, gardenModalActive ? /*#__PURE__*/_jsxDEV(AddToGarden, {\n        plantToGarden: plantToGarden,\n        gardenModalOff: gardenModalOff,\n        token: props.token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 38\n      }, this) : null, createActive ? /*#__PURE__*/_jsxDEV(CreatePlant, {\n        fetchPlants: fetchPlants,\n        token: props.token,\n        createActiveOff: createActiveOff\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this); // const buttonHandler = () => setCreatePlant(true);\n  // <>\n  //     {createPlant ? <CreatePlant setCreatePlant={setCreatePlant} sessionToken={props.sessionToken}/> : null}\n  //     {!createPlant ? <Button onClick={buttonHandler}>Plant It!</Button> : null}\n  // </> \n  //!!! Need to add table above to display plants. Style components or bootstrap table --SC\n};\n\n_s(PlantsIndex, \"DLFc8G3ltPjZpU7fY7wPO5csy+M=\");\n\n_c = PlantsIndex;\nexport default PlantsIndex;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantsIndex\");","map":{"version":3,"sources":["/Users/shelley/Desktop/ElevenFiftyProjects/JavaScript-Library/projects/GardenProject-client/plant-it/src/components/plants/PlantsIndex.js"],"names":["React","useState","useEffect","DisplayPlants","CreatePlant","PlantView","AddToGarden","Container","Row","Col","PlantsIndex","props","plants","setPlants","viewActive","setViewActive","createActive","setCreateActive","plantToView","setPlantToView","gardenModalActive","setGardenModalActive","plantToGarden","setPlantToGarden","console","log","fetchPlants","fetch","method","headers","Headers","then","res","json","plantData","viewPlant","plant","viewOn","viewOff","addToGarden","gardenModalOn","gardenModalOff","createActiveOn","createActiveOff","token"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DisplayPlants from './plantTable/PlantTable';\nimport CreatePlant from './createPlant/CreatePlant';\nimport PlantView from './PlantView';\nimport AddToGarden from '../gardens/AddToGarden';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst PlantsIndex = (props) => {\n\n    const [plants, setPlants] = useState([]);\n    const [viewActive, setViewActive] = useState(false);\n    const [createActive, setCreateActive] = useState(false);\n    const [plantToView, setPlantToView] = useState([]);\n    const [gardenModalActive, setGardenModalActive] = useState(false);\n    const [plantToGarden, setPlantToGarden] = useState([]);\n    console.log(plants);\n    console.log('view active:', viewActive)\n    const fetchPlants = () => {\n        fetch('http://wd85-plant-it.herokuapp.com/plant/all', {\n            method: 'GET',\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            }),\n        })\n            .then(res => res.json())\n            .then((plantData) => {\n                setPlants(plantData)\n                console.log(plants, plantData);\n            })\n    }\n    // view functions\n    const viewPlant = (plant) => {\n        setPlantToView(plant);\n        console.log(plant);\n    }\n    const viewOn = () => {\n        setViewActive(true)\n    }\n    const viewOff = () => {\n        setViewActive(false)\n    }\n\n    // add to garden functions (ignore this for now)\n    const addToGarden = (plant) => {\n        setPlantToGarden(plant);\n    }\n    const gardenModalOn = () => {\n        setGardenModalActive(true)\n    }\n    const gardenModalOff = () => {\n        setGardenModalActive(false)\n    }\n\n    // create functions (plantIt)\n    const createActiveOn = () =>{\n        setCreateActive(true);\n    }\n    const createActiveOff = () =>{\n        setCreateActive(false)\n    }\n\n    useEffect(() => {\n        fetchPlants();\n    }, [])\n\n    return (\n        <Container>\n            <div>\n                <button onClick={createActiveOn}>PlantIt!</button>\n                <DisplayPlants plants={plants} viewPlant={viewPlant} viewOn={viewOn} addToGarden={addToGarden} gardenModalOn={gardenModalOn} fetchPlants={fetchPlants} token={props.token} />\n            </div>\n            <div>\n                {viewActive ? <PlantView plantToView={plantToView} viewOff={viewOff} addToGarden={addToGarden} gardenModalOn={gardenModalOn} /> : null}\n\n                {gardenModalActive ? <AddToGarden plantToGarden={plantToGarden} gardenModalOff={gardenModalOff} token={props.token} /> : null}\n\n                {createActive ? <CreatePlant fetchPlants={fetchPlants} token={props.token} createActiveOff={createActiveOff}/> : null }\n            </div>\n        </Container>\n    )\n    // const buttonHandler = () => setCreatePlant(true);\n\n\n    // <>\n    //     {createPlant ? <CreatePlant setCreatePlant={setCreatePlant} sessionToken={props.sessionToken}/> : null}\n    //     {!createPlant ? <Button onClick={buttonHandler}>Plant It!</Button> : null}\n    // </> \n\n    //!!! Need to add table above to display plants. Style components or bootstrap table --SC\n}\nexport default PlantsIndex;"]},"metadata":{},"sourceType":"module"}