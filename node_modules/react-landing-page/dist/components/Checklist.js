'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rebass = require('rebass');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Item = function Item(_ref) {
  var checkmark = _ref.checkmark,
      text = _ref.text,
      last = _ref.last;
  return _react2.default.createElement(
    _rebass.Flex,
    { is: 'li', mt: [2], mb: 2, pb: 3, alignItems: 'center', justifyContent: 'space-between',
      style: { borderBottom: last ? 'none' : '1px solid rgba(128, 128, 128, 0.5)' } },
    _react2.default.createElement(
      _rebass.Lead,
      null,
      text
    ),
    _react2.default.createElement(
      _rebass.Box,
      { ml: [2, 5], fontSize: 3 },
      checkmark
    )
  );
};

Item.propTypes = {
  checkmark: _propTypes2.default.string,
  text: _propTypes2.default.string,
  last: _propTypes2.default.bool
};

var Checklist = function Checklist(_ref2) {
  var checkmark = _ref2.checkmark,
      children = _ref2.children,
      props = _objectWithoutProperties(_ref2, ['checkmark', 'children']);

  return _react2.default.createElement(
    _rebass.Flex,
    _extends({ is: 'ul',
      p: 0, style: { listStyle: 'none' },
      flexDirection: 'column'
    }, props),
    children.map(function (item, index) {
      return _react2.default.createElement(Item, { text: item, checkmark: checkmark,
        key: item,
        last: index + 1 === children.length });
    })
  );
};

Checklist.displayName = 'Checklist';
Checklist.defaultProps = {
  checkmark: 'âœ…',
  children: []
};
Checklist.propTypes = {
  checkmark: _propTypes2.default.string,
  children: _propTypes2.default.any
};
exports.default = Checklist;